# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import vertexai
from vertexai.preview.generative_models import GenerativeModel, GenerationConfig
from json import loads, dumps
import re
from vertexai.language_models import TextGenerationModel
import os

# Project Details
PROJECT_ID = os.environ['PROJECT_ID']
LOCATION = os.environ['REGION']

# Prompt Details
TASK = '''You are a bot helping convert Natural Language Query and output of
      SQL query to a human understandable form. Below is the `Question Asked` and
      answer generated by `SQL`. Please help generate answer in Natural Language.'''
RESP_FORMAT = '''
  Guidelines:

  1. Return a text response in natural language.
  2. Return "No Response" if not able to generate response.
'''

vertexai.init(project=PROJECT_ID, location=LOCATION)

parameters = {
        "temperature": 0,  # Temperature controls the degree of randomness in token selection.
        "max_output_tokens": 1024,  # Token limit determines the maximum amount of text output.
        "top_p": 0,  # Tokens are selected from most probable to least until the sum of their probabilities equals the top_p value.
        "top_k": 1,  # A top_k of 1 means the selected token is the most probable among all tokens.
}


def resp2text_prompt(model_name,
                     question,
                     sql_query_response, params=parameters):
  prompt = '''
  Question Asked
  {question}

  Response
  "{sql_query_response}"

  The json response represents the output of the SQL query.

  Return response in human understandable form, take the context from `Question Asked` while
  generating the natural language response.

  If the questioned asked is What about three or more additional programs?, don't include years while replying.
  If the questioned asked is Has this changed over time? or the question is How many Black individuals are served across CalHHS programs? Has this changed over time?, answer
  the question from callHHS percepective
  If the questioned asked is What about the ratio to licensed facilities?, answer the question specifying that the ratios mentioned refers to non-suspended doctors

  If not able to generate response basis knowledge provided return '' as a string.
  '''
  if model_name == "text-bison":
    model = TextGenerationModel.from_pretrained("text-bison-32k@002")
    # (model_name="text-bison-002", generation_config=PARAMS)
    # model_response = model.generate_content(
    #     prompt.format(
    #         question=question,
    #         sql_query_response=sql_query_response,
    #         TASK=TASK,
    #         resp_format=resp_format
    #   )
    # )
    prompt_mod = prompt.format(question=question, sql_query_response=sql_query_response)
    model_response = model.predict(prompt_mod, **params)
    resp = model_response.text
  elif model_name == "gemini-pro":
    model = GenerativeModel("gemini-pro")
    model_response = model.generate_content(contents=prompt, generation_config=GenerationConfig(**params))
    resp = model_response.text

  return resp

def getgenai_response(model_name, question, response, params):
  answer = resp2text_prompt(model_name, question, response, params)
  if not answer.strip():
    return ''
  return answer

def parse_and_modify_query(query):
    # Regular expression to find table names
    table_pattern = r'(?:FROM|JOIN)\s+([^\s,]+)'

    # Find all matches of table names in the query
    tables = re.findall(table_pattern, query, re.IGNORECASE)

    # Modify the query to include backticks around table names
    modified_query = query
    for table in tables:
        modified_query = modified_query.replace(table, f'`{table}`')

    return modified_query

if __name__=='__main__':
    resp = getgenai_response('How many people are registered in callFresh', '(125656,)')
