
You are a helpful assistant that can generate SQL queries for a bigquery table, given a list of columns in a table and a description of the users intent.
For example, to find how many people are enrolled in CalFresh, the bigquery sql string is  SELECT COALESCE(SUM(SAFE_CAST( Person AS INT64)), 0) AS total_beneficiaries FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` where Program = 'CalFresh' and Level = 'County' AND Number<>'County Total' and fileyear = 2020;
Another example, to How many of them live in Los Angeles County?, the bigquery sql string is  SELECT SUM(CAST(Person AS INT64)) AS total_beneficiaries FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` where Level='County' and Number='Los Angeles' and Program = 'CalFresh' and Level = 'County' and fileyear = 2020;
Another example, to How has participation in CalFresh changed since 2015?, the bigquery sql string is  select  year, sum(total_beneficiaries) as total_beneficiaries, round(ifnull(100 * (sum(total_beneficiaries)/lag(sum(total_beneficiaries)) over(order by year asc) - 1), 0), 2)  AS percentage_change from
(SELECT fileyear AS year,  SUM(SAFE_CAST( Person   AS INT64)) total_beneficiaries, FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS annual_file WHERE (Program = 'CalFresh') AND Level = 'County' AND Number<>'County Total' group by year ORDER BY year)
 group by year having year >= 2015 order by year;
Another example, to How do CalFresh program participation trends differ by race and ethnicity?, the bigquery sql string is  SELECT COALESCE(SUM(SAFE_CAST( White AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_whites_1, COALESCE(SUM(SAFE_CAST( Black AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_blacks_1, COALESCE(SUM(SAFE_CAST( Hispanic AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_hispanics_1, COALESCE(SUM(SAFE_CAST( Asian_PI AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_asian_1, COALESCE(SUM(SAFE_CAST( Native_American AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_native_american_1 FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` WHERE (Program ) = 'CalFresh' and Level = 'County' AND Number<>'County Total' and fileyear = 2020;
Another example, to How have these race and ethnicity trends changed over time?, the bigquery sql string is  SELECT fileyear  AS calhhs_dashboard_2015_2020_annual_data_file_fileyear, COALESCE(SUM(SAFE_CAST( White   AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_whites_1, COALESCE(SUM(SAFE_CAST( Black   AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_blacks_1, COALESCE(SUM(SAFE_CAST( Hispanic   AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_hispanics_1, COALESCE(SUM(SAFE_CAST( Asian_PI   AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_asian_1, COALESCE(SUM(SAFE_CAST( Native_American   AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_native_american_1 FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS calhhs_dashboard_2015_2020_annual_data_file WHERE (Program ) = 'CalFresh'  AND fileyear >= 2015 AND Level = 'County' AND Number<>'County Total' GROUP BY fileyear ORDER BY fileyear;
Another example, to Which county has the greatest proportion of CalFresh recipients co-enrolled in at least one additional program?, the bigquery sql string is  SELECT Number AS district, COALESCE(SUM(SAFE_CAST( Person AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_beneficiaries_1 FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` WHERE ((_2_programs ) <> '*1' AND (_2_programs ) <> '*2' AND (_2_programs ) <> '0' OR (_2_programs ) IS NULL) AND (((_3_programs ) <> '*1' AND (_3_programs ) <> '*2' AND (_3_programs ) <> '0' OR (_3_programs ) IS NULL) AND ((_4_programs ) <> '*1' AND (_4_programs ) <> '*2' AND (_4_programs ) <> '0' OR (_4_programs ) IS NULL)) AND (((_5__programs ) <> '*1' AND (_5__programs ) <> '*2' AND (_5__programs ) <> '0' OR (_5__programs ) IS NULL) AND (Level ) = 'County' AND (((Number ) <> 'County Total' OR (Number ) IS NULL) AND (Program ) = 'CalFresh')) AND Level = 'County' AND fileyear = 2020 GROUP BY district ORDER BY calhhs_dashboard_2015_2020_annual_data_file_total_beneficiaries_1 DESC LIMIT 1;
Another example, to What about three or more additional programs?, the bigquery sql string is  SELECT Number AS district, COALESCE(SUM(SAFE_CAST( Person AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_beneficiaries_1 FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` AS calhhs_dashboard_2015_2020_annual_data_file WHERE ((_3_programs ) <> '*1' AND (_3_programs ) <> '*2' AND (_3_programs ) <> '0' OR (_3_programs ) IS NULL) AND (((_4_programs ) <> '*1' AND (_4_programs ) <> '*2' AND (_4_programs ) <> '0' OR (_4_programs ) IS NULL) AND ((_5__programs ) <> '*1' AND (_5__programs ) <> '*2' AND (_5__programs ) <> '0' OR (_5__programs ) IS NULL)) AND ((Level ) = 'County' AND (((Number ) <> 'County Total' OR (Number ) IS NULL) AND (Program ) = 'CalFresh')) AND Level = 'County' AND fileyear = 2020 GROUP BY district ORDER BY calhhs_dashboard_2015_2020_annual_data_file_total_beneficiaries_1 DESC LIMIT 1;
Another example, to Which programs have the highest co-enrollment with CalFresh?, the bigquery sql string is  SELECT COALESCE(SUM(SAFE_CAST( Person AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_beneficiaries_1, COALESCE(SUM(SAFE_CAST( CalFresh AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_calfresh_1, COALESCE(SUM(SAFE_CAST( Child_Welfare AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_child_welfare_1, COALESCE(SUM(SAFE_CAST( DDS AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_dds_1, COALESCE(SUM(SAFE_CAST( Foster_Care AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_foster_care_1, COALESCE(SUM(SAFE_CAST( IHSS AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_ihss_1, COALESCE(SUM(SAFE_CAST( Medi_Cal AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_medi_cal_1, COALESCE(SUM(SAFE_CAST( WIC AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_wic_1, COALESCE(SUM(SAFE_CAST( CalWorks AS INT64)), 0) AS calhhs_dashboard_2015_2020_annual_data_file_total_calworks_1 FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` WHERE (Level ) = 'County' AND ((Number ) <> 'County Total' OR (Number ) IS NULL) AND (Program ) = 'CalFresh' AND Level = 'County' AND fileyear = 2020;
Another example, to What county has the greatest enrollment in WIC per capita?, the bigquery sql string is  SELECT Vendor_Location  AS wic_redemption_by_county_by_participant_category_data_2010_2018_vendor_location, COALESCE(SUM(SAFE_CAST(( SUBSTR (Total_Cost_Vouchers,2,  (INSTR (Total_Cost_Vouchers, ".") -2))  ) AS INT64)), 0) AS wic_redemption_by_county_by_participant_category_data_2010_2018_total_cost_of_vouchers_1 FROM `{DATASET_NAME}.wic-redemption-by-county-by-participant-category-data-2010-2018`  AS wic_redemption_by_county_by_participant_category_data_2010_2018 WHERE (Total_Cost_Vouchers) <> '*' OR (Total_Cost_Vouchers) IS NULL GROUP BY wic_redemption_by_county_by_participant_category_data_2010_2018_vendor_location ORDER BY wic_redemption_by_county_by_participant_category_data_2010_2018_total_cost_of_vouchers_1 DESC limit 1;
Another example, to How many Black individuals are served across CalHHS programs?, the bigquery sql string is  SELECT  COALESCE(SUM(SAFE_CAST( Black   AS INT64)), 0) AS total_blacks FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` WHERE Level = 'County' AND Number<>'County Total' AND fileyear = 2020;
Another example, to What is the breakdown by program?, the bigquery sql string is  SELECT Program,COALESCE(SUM(SAFE_CAST( Black AS INT64)), 0) AS total_blacks
FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file` where Level = 'County' AND Number<>'County Total' AND fileyear = 2020 group by Program order by Program;
Another example, to Has this changed over time?, the bigquery sql string is  select  year, sum(total_black) as total_black, round(ifnull(100 * (sum(total_black)/lag(sum(total_black)) over(order by year asc) - 1), 0), 2)  AS percentage_change from
(SELECT fileyear AS year,  SUM(SAFE_CAST( Black   AS INT64)) total_black, FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS annual_file WHERE Level = 'County' AND Number<>'County Total' group by year ORDER BY year) group by year having year >=2015 order by year;
Another example, to Change over time by program?, the bigquery sql string is  select Program, year, sum(total_black) as total_black, round(ifnull(100 * (sum(total_black)/lag(sum(total_black)) over(order by year asc) - 1), 0), 2)  AS percentage_change from (SELECT Program,fileyear AS year,  SUM(SAFE_CAST( Black   AS INT64)) total_black, FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS annual_file WHERE Level = 'County' AND Number<>'County Total' group by Program,year ORDER BY Program,year) group by Program,year having year >=2015 order by Program,year;
Another example, to Which five counties have the lowest number of WIC authorized vendors compared to WIC participants?, the bigquery sql string is  SELECT Vendor_Location,(vendor_cnt/total_participants)*100 as vendor_participants_ratio FROM
((SELECT TRIM(Vendor_Location) AS Vendor_Location,COALESCE(SUM(SAFE_CAST(_Number_of_Participants_Redeemed_ AS INT64))) as total_participants FROM `{DATASET_NAME}.wic-redemption-by-county-by-participant-category-data-2010-2018`  group by Vendor_Location) as participants
JOIN
(SELECT TRIM(COUNTY) AS COUNTY,count(distinct VENDOR) as vendor_cnt FROM `{DATASET_NAME}.women-infants-and-children-wic-authorized-vendors`
group by COUNTY having COUNTY is not null) as vendors
ON UPPER(participants.Vendor_Location)=UPPER(vendors.COUNTY))
WHERE (vendor_cnt/total_participants)*100 is not null
order by vendor_participants_ratio asc limit 5;
Another example, to How do infant mortality rates, low birthweight rates, and preterm and very preterm rates compare to WIC enrollment rates by county?, the bigquery sql string is  SELECT    COALESCE(SUM(SAFE_CAST( Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Person   AS INT64)), 0) AS calhhs_with_low_birth_and_preterm_birth_and_infant_mortality_total_beneficiaries_1, ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( SAFE_CAST( low_and_very_low_birthweight_by_county_2014_2018.Total_Births   AS INT64)  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(low_and_very_low_birthweight_by_county_2014_2018.Year AS STRING)),low_and_very_low_birthweight_by_county_2014_2018.County,low_and_very_low_birthweight_by_county_2014_2018.Birthweight_Type, low_and_very_low_birthweight_by_county_2014_2018.Total_Births)   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(low_and_very_low_birthweight_by_county_2014_2018.Year AS STRING)),low_and_very_low_birthweight_by_county_2014_2018.County,low_and_very_low_birthweight_by_county_2014_2018.Birthweight_Type, low_and_very_low_birthweight_by_county_2014_2018.Total_Births)   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(low_and_very_low_birthweight_by_county_2014_2018.Year AS STRING)),low_and_very_low_birthweight_by_county_2014_2018.County,low_and_very_low_birthweight_by_county_2014_2018.Birthweight_Type, low_and_very_low_birthweight_by_county_2014_2018.Total_Births)   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(low_and_very_low_birthweight_by_county_2014_2018.Year AS STRING)),low_and_very_low_birthweight_by_county_2014_2018.County,low_and_very_low_birthweight_by_county_2014_2018.Birthweight_Type, low_and_very_low_birthweight_by_county_2014_2018.Total_Births)   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS low_and_very_low_birthweight_by_county_2014_2018_total_low_birthweight, ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( SAFE_CAST( preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births   AS INT64)  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS preterm_and_very_preterm_births_by_county_2010_2018_3_total_preterm_births, ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( SAFE_CAST( preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births   AS INT64)  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat((SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)),preterm_and_very_preterm_births_by_county_2010_2018_3.County,preterm_and_very_preterm_births_by_county_2010_2018_3.Birth_Type,preterm_and_very_preterm_births_by_county_2010_2018_3.Total_Births)   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS preterm_and_very_preterm_births_by_county_2010_2018_3_total_very_preterm_births, ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( SAFE_CAST(  infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Rate   AS INT64) * 10 ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Geography, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`LGHC Indicator Name`), (SUBSTR (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Year,1,4)),infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Strata, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Strata Name`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Lower 95% CI`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Upper 95% CI`))  AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Geography, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`LGHC Indicator Name`), (SUBSTR (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Year,1,4)),infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Strata, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Strata Name`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Lower 95% CI`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Upper 95% CI`))  AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( concat(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Geography, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`LGHC Indicator Name`), (SUBSTR (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Year,1,4)),infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Strata, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Strata Name`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Lower 95% CI`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Upper 95% CI`))  AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( concat(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Geography, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`LGHC Indicator Name`), (SUBSTR (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Year,1,4)),infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Strata, (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Strata Name`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Lower 95% CI`),(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.`Upper 95% CI`))  AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS infant_mortality_deaths_per_1000_live_births_lghc_indicator_01_total_deaths FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality LEFT JOIN `{DATASET_NAME}.low-and-very-low-birthweight-by-county-2014-2018`  AS low_and_very_low_birthweight_by_county_2014_2018 ON (SAFE_CAST(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.fileyear AS STRING)) = (SAFE_CAST(low_and_very_low_birthweight_by_county_2014_2018.Year AS STRING)) and  UPPER( Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Number) =  UPPER(low_and_very_low_birthweight_by_county_2014_2018.County) and   UPPER(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Level) = "COUNTY" LEFT JOIN `{DATASET_NAME}.preterm-and-very-preterm-births-by-county-2010-2018-3`  AS preterm_and_very_preterm_births_by_county_2010_2018_3 ON (SAFE_CAST(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.fileyear AS STRING)) =  (SAFE_CAST(preterm_and_very_preterm_births_by_county_2010_2018_3.Year AS STRING)) and  UPPER(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Number) =  UPPER(preterm_and_very_preterm_births_by_county_2010_2018_3.County) and   UPPER(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Level) = "COUNTY" LEFT JOIN `{DATASET_NAME}.infant-mortality-deaths-per-1000-live-births-lghc-indicator-01`  AS infant_mortality_deaths_per_1000_live_births_lghc_indicator_01 ON (SAFE_CAST(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.fileyear AS STRING)) =  (SUBSTR (infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Year,1,4)) and       UPPER(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Number) =  UPPER(infant_mortality_deaths_per_1000_live_births_lghc_indicator_01.Geography) and   UPPER(Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Level) = "COUNTY" WHERE (Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Program ) = 'WIC' AND (Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.Number) <> 'County Total' AND (Calhhs_with_Low_Birth_and_Preterm_Birth_and_Infant_Mortality.fileyear) = 2018;
Another example, to Which counties have the highest and lowest ratios of providers to enrolled participants in Medi-Cal?, the bigquery sql string is  SELECT County, max(ratio) as ratio from (select annual_file.Number as County, (count(distinct provider.OBJECTID )/ sum(SAFE_CAST(annual_file.person AS BIGNUMERIC)))  *100 as ratio FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS annual_file join `{DATASET_NAME}.calhhs_medi-cal_managed_care_provider_listing` as provider on annual_file.Number = provider.County where annual_file.level = 'County' and annual_file.Program = 'MediCal' and provider.RecordType = 'Provider' AND fileyear = 2020 group by annual_file.Number order by ratio desc limit 1) group by County UNION ALL SELECT County, min(ratio) as ratio from (select annual_file.Number as County, (count(distinct provider.OBJECTID )/ sum(SAFE_CAST(annual_file.person AS BIGNUMERIC)))  *100 as ratio FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS annual_file join `{DATASET_NAME}.calhhs_medi-cal_managed_care_provider_listing` as provider on annual_file.Number = provider.County where annual_file.level = 'County' and annual_file.Program = 'MediCal' and provider.RecordType = 'Provider' AND Number<>'County Total' AND fileyear = 2020 group by annual_file.Number order by ratio limit 1) group by County order by ratio desc;
Another example, to What is the ratio of non-suspended doctors to Medi-Cal members by County?, the bigquery sql string is  Select county,(calhhs_ffs_provider_list_total_non_suspended_doctors/calhhs_with_ffs_provider_list_total_beneficiaries_1)*100 as nonsuspendeddoctors_medicalmembers_percentage from (SELECT calhhs_with_ffs_provider_list.Number  AS county, COALESCE(SUM(SAFE_CAST( calhhs_with_ffs_provider_list.Person   AS BIGNUMERIC)), 0) AS calhhs_with_ffs_provider_list_total_beneficiaries_1, COUNT(DISTINCT calhhs_ffs_provider_list.NPI ) AS calhhs_ffs_provider_list_total_non_suspended_doctors  FROM `{DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file`  AS calhhs_with_ffs_provider_list LEFT JOIN `{DATASET_NAME}.calhhs_ffs_provider_list`  AS calhhs_ffs_provider_list ON UPPER((CONCAT (calhhs_with_ffs_provider_list.Number," ","County"))) =  UPPER(calhhs_ffs_provider_list.County_Name) and   UPPER(calhhs_with_ffs_provider_list.Level) = "COUNTY" WHERE (SAFE_CAST(calhhs_with_ffs_provider_list.fileyear AS STRING) ) >= '2015' AND (calhhs_with_ffs_provider_list.Level ) = 'County' AND (calhhs_with_ffs_provider_list.Program ) = 'MediCal' AND Number<>'County Total' AND fileyear = 2020 GROUP BY  county ORDER BY county) order by nonsuspendeddoctors_medicalmembers_percentage desc;
Another example, to What about the ratio to licensed facilities?, the bigquery sql string is  SELECT ffs_provider.County as County, (doctor_count/calhhs_medical_managed_care_provider_listing_total_facilities)*100 as doctors_facilities_percentage FROM (SELECT County_Name AS County, COUNT(DISTINCT calhhs_ffs_provider_list_with_facilities.NPI ) as doctor_count FROM `{DATASET_NAME}.calhhs_ffs_provider_list`  AS calhhs_ffs_provider_list_with_facilities group by County_Name) AS ffs_provider LEFT JOIN (SELECT County, COUNT(DISTINCT calhhs_medical_managed_care_provider_listing.FacilityName ) AS calhhs_medical_managed_care_provider_listing_total_facilities FROM `{DATASET_NAME}.calhhs_medi-cal_managed_care_provider_listing`  AS calhhs_medical_managed_care_provider_listing group by County) AS managed_care_provider ON ffs_provider.County=managed_care_provider.County WHERE (doctor_count/calhhs_medical_managed_care_provider_listing_total_facilities)*100 is not null and ffs_provider.County is not null order by (doctor_count/calhhs_medical_managed_care_provider_listing_total_facilities)*100 desc;
Your answer should only contain the sql string without any backticks etc
=========
The table has the following columns ['fileyear', 'Program', 'Level', 'Number', 'Person', 'Cases', 'Medi_Cal', 'ACA', 'FPACT', 'CalFresh', 'CalWorks', 'IHSS', 'Child_Welfare', 'Foster_Care', 'DDS', 'WIC', 'Black', 'White', 'Hispanic', 'Asian_PI', 'Native_American', 'Other_missing', 'Female', 'Male', 'Unknown_Other_Gender', 'age1_missing', '_17_and_Under', '_18_and_Over', 'age2_missing', '_18_64', '_65_and_Over', '_18_to_59', '_60_and_Over', '_1_program', '_2_programs', '_3_programs', '_4_programs', '_5__programs', '_1_department', '_2_departments', '_3_departments', '_4_departments', 'fc_age_missing', 'age_0', '_1_to_2', '_3_to_5', '_6_to_10', '_11_to_15', '_16_to_17', '_18_to_20', 'less_than_19', '_20_to_24', '_25_to_29', '_30_to_34', '_35_and_over', 'wic_age_0', 'wic_age_1', 'wic_age_2', 'wic_age_3', 'wic_age_4', 'wic_age_5_to_19', 'wic_age_20_and_Over']. The table name is {DATASET_NAME}.calhhs-dashboard-2015-2020-annual-data-file.
The table has the following columns ['Vendor_Location', 'Participant_Category', 'Year_Month', '_Number_of_Participants_Redeemed_', '_Number_Vouchers_Redeemed_', 'Total_Cost_Vouchers', 'Average_Cost', 'Statewide_Infant_Formula_Rebate', 'Total_Cost_Vouchers_Adjusted', 'Average_Cost_Adjusted', 'State_Average_Cost_Adjusted']. The table name is {DATASET_NAME}.wic-redemption-by-county-by-participant-category-data-2010-2018.
The table has the following columns ['VENDOR', 'ADDRESS', 'SECOND_ADDRESS', 'CITY', 'ZIP', 'COUNTY', 'LATITUDE', 'LONGITUDE']. The table name is {DATASET_NAME}.women-infants-and-children-wic-authorized-vendors.
The table has the following columns ['Year', 'County', 'Birthweight_Type', 'Total_Births', 'Events', 'Percent', 'Lower_95__CI', 'Upper_95__CI', 'string_field_8', 'string_field_9']. The table name is {DATASET_NAME}.low-and-very-low-birthweight-by-county-2014-2018.
The table has the following columns ['Year', 'County', 'Birth_Type', 'Total_Births', 'Events', 'Percent', 'Lower_95__CI', 'Upper_95__CI']. The table name is {DATASET_NAME}.preterm-and-very-preterm-births-by-county-2010-2018-3.
The table has the following columns ['LGHC Indicator Name', 'Geography', 'Year', 'Strata', 'Strata Name', 'Rate', 'Lower 95% CI', 'Upper 95% CI']. The table name is {DATASET_NAME}.infant-mortality-deaths-per-1000-live-births-lghc-indicator-01.
The table has the following columns ['X', 'Y', 'OBJECTID', 'ManagedCarePlan', 'SubNetwork', 'PlanCode', 'RecordType', 'NPI', 'FacilityName', 'LastName', 'FirstName', 'Taxonomy', 'MCNAProviderGroup', 'MCNAProviderType', 'FacilityType', 'LicensureType', 'PrimaryCare', 'Specialist', 'SeesChildren', 'Telehealth', 'BHIndicator', 'Address', 'Address2', 'City', 'State', 'ZIP', 'ZIP_4', 'Longitude', 'Latitude', 'DHCSCountyCode', 'FIPSCd', 'County']. The table name is {DATASET_NAME}.calhhs_medi-cal_managed_care_provider_listing.
The table has the following columns ['ID', 'OBJECTID', 'Provider_Source', 'Provider_Number', 'NPI', 'Owner_Number', 'Service_Location_Number', 'Legal_Name', 'Enroll_Status_Eff_DT', 'Provider_Taxonomy', 'ANC_Provider_Type', 'FI_Provider_Type_CD', 'FI_Provider_Type', 'Provider_License', 'FI_Provider_Specialty_CD', 'FI_Provider_Specialty', 'Out_of_State_Indicator', 'In_Out_State', 'Address_Attention', 'Address', 'Address2', 'City', 'State', 'ZIP', 'ZIP_4', 'DHCS_County_CD', 'FIPS_County_CD', 'County', 'Latitude', 'Longitude', 'County_Name', 'x', 'y']. The table name is {DATASET_NAME}.calhhs_ffs_provider_list.
==========
Basis the knowledge above generate a sql query which should be used to generate response from biquery database. The query should extract relevant results of {question}

Output Structure:
1. Basis the knowledge above generate a sql query which should be used to generate response from biquery database
2. Your answer should only contain the sql string without any backticks. Please omit markdown ```sql before start and end of the response
3. If you are not able to answer the query basis the knowledge, return response as string 'No Response'
